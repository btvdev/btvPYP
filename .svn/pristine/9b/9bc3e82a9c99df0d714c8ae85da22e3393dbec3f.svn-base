package com.btvpyp.sample.service.impl;

import java.io.File;
import java.util.List;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.btvpyp.advType.dao.TabAdvTypesDao;
import com.btvpyp.sample.dao.TabSampleDao;
import com.btvpyp.sample.model.FingerPush;
import com.btvpyp.sample.model.FingerPushBack;
import com.btvpyp.sample.model.TabSample;
import com.btvpyp.sample.service.TabSampleService;
import com.btvpyp.sampleMatch.dao.TabSampleMatchDao;
import com.btvpyp.sampleMatch.model.TabSampleMatch;
import com.btvpyp.utils.Commons;
import com.btvpyp.utils.FileUtils;
import com.btvpyp.utils.HttpClient;
import com.btvpyp.utils.KeyGen;
import com.btvpyp.utils.LogUtil;
import com.btvpyp.utils.TimeUtil;
@Service
public class TabSampleServiceImpl implements TabSampleService {
	@Autowired
	public TabSampleDao tabSampleDao;
	@Autowired
	public TabAdvTypesDao tabAdvTypesDao;
	@Autowired
	public TabSampleMatchDao tabSampleMatchDao;
	
	@Override
	public List<TabSample> selectTabSamples(TabSample tabSample) {
		return tabSampleDao.selectTabSamples(tabSample);
	}
	
	@Override
	public String insertTabSample(TabSample tabSample) {
		String columnType = tabSample.getColumnType();
		//如果样本类型为节目，则时长置为空
		if(columnType.equals("jm")) {
			tabSample.setLength(0);
		}
		String fileAddr = tabSample.getFileAddr();
		if(null != fileAddr && !"".equals(fileAddr)){
			if(!fileAddr.contains(".mp4") || fileAddr.contains(".MP4")) {
				tabSample.setFileAddr("");
				tabSample.setFileNetAddr("");
				tabSample.setExtFlag(4);  //如果fileAddr不包含mp4，则extFlag设置为4，代表暂时不推送指纹
			}
		}
		Integer re = tabSampleDao.insertTabSample(tabSample);
//		re = 0;//接口联调前暂时不要注释这一行，彻底走接口后该行需要注释掉！
		if(re == 1){ 
			//生成TabSamplePush对象,调用对方接口
			if(tabSample.getExtFlag() != 3) { //如果样本没有mp4文件，则不进行推送当虹
				push(tabSample);
			}
		}
		return tabSample.getSampleId();
	}
	
	//从Excel导入数据的插入记录方法(暂时弃用)
	//先修改一下文件名，然后再进行推送
	@Override
	public String insertTabSampleFromExcel(TabSample tabSample) {
		String sampleId = KeyGen.getADVId();
		tabSample.setSampleId(sampleId);
		String fileLoc = tabSample.getFileAddr();
		File file = new File(fileLoc);
		String fileMainName = tabSample.getMainName();
		fileMainName = fileMainName.replaceAll("$", "");//去掉特殊符号
		if(file.exists()){ //如果文件存在，则进行文件名更改
			String newFileName = tabSample.getSampleId() + "_" + tabSample.getMainName() + ".mp4";
			String newPath = FileUtils.modifyFileName(tabSample.getFileAddr(), newFileName);
			String newNetAddr = tabSample.getFileNetAddr() + newFileName;
			tabSample.setFileAddr(newPath);
			tabSample.setFileNetAddr(newNetAddr);
//			System.out.println(newPath);
		}
		Integer re = tabSampleDao.insertTabSample(tabSample);
		
		//数据从Excel导入后暂时不向识别接口直接推送
		re = 0;
		if(re == 1){ 
			//生成TabSamplePush对象,调用对方接口
			push(tabSample);
		}
		return sampleId;
	}
	
	/**
	 * 样本重推
	 */
	@Override
	public void rePush(String sampleId) {
		TabSample tabSample = tabSampleDao.selectObjById(sampleId);
		push(tabSample);
	}
	/**
	 * 删除样本
	 */
	@Override
	public Integer deleteTabSample(String sampleId) {
		int result = 0;
		result = tabSampleDao.deleteTabSample(sampleId);
		tabSampleMatchDao.deleteBySampleId(sampleId);
//		result = 0;
		if(result != 0) {
			String url = Commons.FINGERDELADDR;
			String param = "sampleId=" + sampleId;
			String responseStr = HttpClient.sendPost(url, param); //返回值是true或false
			System.out.println(responseStr);
		}
		return result;
	}
	
	/* 向当虹接口推送，调用指纹注册接口
	 * {
			“name”: 指纹名字
			“programName”:指纹节目名
			“type”: 指纹类型, Titles – 片头, Trailer – 片尾, Ad – 广告
			“source”: 指纹源文件路径
			“sampleId”: 样本id，传入之前需要保证唯一性
			}
	* */
	public String push(TabSample tabSample){
		String responseStr = "";
		String url = Commons.FINGERPUSHADDR;
		
		//生成json字符串
		FingerPush fingerPush = new FingerPush();
		fingerPush.setSampleId(tabSample.getSampleId());
		fingerPush.setName(tabSample.getMainName());
		fingerPush.setProgramName(tabSample.getMainName());
		fingerPush.setType("Ad");
		fingerPush.setRecognizeAgain("true");
		String winFileAddr = tabSample.getFileAddr();
		String linFileAddr = winFileAddr.replace(Commons.VIDEOSAVE, Commons.DHSAVE);
		fingerPush.setSource(linFileAddr);
		String jsonStr = JSONObject.fromObject(fingerPush).toString();
		
		//调用对方指纹注册接口
		responseStr = HttpClient.doPost(url, jsonStr);
//		System.out.println("当虹返回值：----------" + responseStr);
		
		//将目标系统返回值转化成json
		JSONObject json =  JSONObject.fromObject(responseStr);
		FingerPushBack FingerPushBack = (FingerPushBack)JSONObject.toBean(json, FingerPushBack.class);
		String status = FingerPushBack.getStatus();
		if(status.contains("Success")) { //如果推送成功
			//写入日志文件
			String fileName = tabSample.getSampleId() + "_" + TimeUtil.getTimeYMdHMS() + ".txt";
			String saveUrl = Commons.PUSHDATADIR + TimeUtil.getTimeDir() + "/";
			jsonStr += responseStr;
			LogUtil.saveSampleJson(jsonStr, saveUrl, fileName);
			//更新extFlag的值
			tabSample.setExtFlag(3);
			tabSampleDao.updateTabSample(tabSample);
		}else {
			tabSample.setExtFlag(2);
			tabSampleDao.updateTabSample(tabSample);
		}
		return responseStr;
	}
	
	@Override
	public Integer updateTabSample(TabSample tabSample) {
		int result = 0;
		result = tabSampleDao.updateTabSample(tabSample);
		if(result == 1){
			if(tabSample.getExtFlag() == 4){
				tabSample.setExtFlag(0);
				push(tabSample);
			}
		}
		TabSampleMatch tabSampleMatch = new TabSampleMatch();
		tabSampleMatch.setSampleId(tabSample.getSampleId());
		tabSampleMatch.setMainName(tabSample.getMainName());
		tabSampleMatch.setSecondName(tabSample.getSecondName());
		tabSampleMatch.setBrandId(tabSample.getBrandId());
		tabSampleMatch.setColumnType(tabSample.getColumnType());
		tabSampleMatchDao.updateMainName(tabSampleMatch);
		return result;
	}

	

	@Override
	public Integer getTotalCount(TabSample tabSample) {
		return tabSampleDao.getTotalCount(tabSample);
	}

	@Override
	public List<TabSample> findByIds(List<String> ids) {
		return tabSampleDao.findByIds(ids);
	}

	@Override
	public TabSample selectObjById(String sampleId) {
		return tabSampleDao.selectObjById(sampleId);
	}

	@Override
	public List<TabSample> selectUnpushTabSamples(TabSample tabSample) {
		return tabSampleDao.selectUnpushTabSamples(tabSample);
	}

	@Override
	public Integer getUnpushTotalCount(TabSample tabSample) {
		return tabSampleDao.getUnpushTotalCount(tabSample);
	}

	@Override
	public List<TabSample> selectByDimName(String mainName) {
		return tabSampleDao.selectByDimName(mainName);
	}

	@Override
	public String selectOneNameById(String sampleId) {
		// TODO Auto-generated method stub
		return tabSampleDao.selectOneNameById(sampleId);
	}

}
