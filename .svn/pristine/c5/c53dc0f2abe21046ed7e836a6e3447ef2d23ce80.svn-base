package com.btvpyp.task;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Timestamp;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;

import com.btvpyp.broadBack.model.ProgramPieceVO;
import com.btvpyp.broadBack.model.TabBfdLoad;
import com.btvpyp.broadBack.model.TabBroadBack;
import com.btvpyp.broadBack.service.TabBfdLoadService;
import com.btvpyp.broadBack.service.TabBroadBackService;
import com.btvpyp.detail.service.TabDetailService;
import com.btvpyp.sample.model.TabSample;
import com.btvpyp.sample.service.TabSampleService;
import com.btvpyp.utils.Commons;
import com.btvpyp.utils.FileUtils;
import com.btvpyp.utils.HttpClient;
import com.btvpyp.utils.ImportExcelUtil;
import com.btvpyp.utils.JSONObjectUtils;
import com.btvpyp.utils.KeyGen;
import com.btvpyp.utils.LogUtil;
import com.btvpyp.utils.StrUtils;
import com.btvpyp.utils.TimeUtil;
/**
 * 播返单定时任务类
 * @author gaobo
 *
 */
public class TaskController {
	
	@Autowired
	private TabBroadBackService tabBroadBackService;
	@Autowired
	private TabBfdLoadService tabBfdLoadService;
	@Autowired
	public TabSampleService tabSampleService;
	@Autowired
	public TabDetailService tabDetailService;
	
	/**
	 * 每1小时触发
	 * 自动从播返单库中读取未发送给当虹系统的自动化拆条记录，
	 * 并发送给当虹请求做自动化拆条
	 * 
	 */
	@Scheduled(cron = "0 0 */1 * * ?") //每1小时
//	@Scheduled(cron = "0 */6 * * * ?") //每5分钟(测试)
	public void autoSendTrimTime() {
		/*
		 * 前置条件：每天0点到7点，不要进行定时任务
		 * */
		String currDay = TimeUtil.getCurrDay();
		String canSearch = currDay + " 07:00:00";
		Long canSearchStamp = TimeUtil.stringToTimestamp(canSearch, "yyyy-MM-dd HH:mm:ss");
		Long nowStamp = System.currentTimeMillis();
		if(nowStamp > canSearchStamp) {
			//1.从播返单表中查询出cuted字段值为0的播返单数据
			TabBroadBack tbb = new TabBroadBack();
			tbb.setCuted(0);
			List<TabBroadBack> unCutedList = tabBroadBackService.selectUncuted(tbb);
			//2.格式化时间，拼装json对象
			if(null != unCutedList && unCutedList.size() >0) {
				for(TabBroadBack tabBroadBack : unCutedList) {
					String startTime = tabBroadBack.getStarttime();
					String endTime = tabBroadBack.getEndtime();
					startTime = TimeUtil.changeStringTimeFormat(startTime, "yyyy-MM-dd HH:mm:ss", "yyyyMMdd-HHmmss");
					endTime = TimeUtil.changeStringTimeFormat(endTime, "yyyy-MM-dd HH:mm:ss", "yyyyMMdd-HHmmss");
					ProgramPieceVO ppv = new ProgramPieceVO();
					ppv.setStartTime(startTime);
					ppv.setEndTime(endTime);
					ppv.setData(tabBroadBack.getBroadBackId().toString());
					ppv.setPid(tabBroadBack.getChannel());
					String uncutedBeanJson = JSONObjectUtils.objectToJsonString(ppv);
					//3.调用当虹接口，发送post请求
					HttpClient.doPost(Commons.TRIMCONTENTADDR, uncutedBeanJson);
					
					//将推送给当虹http请求body中json字符串记录到静态文件中做备份  --start
					String saveUrl = Commons.PIECEREQUESTLOGDIR + TimeUtil.getTimeDir() + "/";
					String logFileName = "piecequestlog_" + startTime + ".txt";
					LogUtil.saveSampleJson(uncutedBeanJson, saveUrl, logFileName);
					//将接口传过来的http请求body记录到静态文件中做备份  --end
				}
			}
		}
	}
	
	/**
	 * 自动遍历上载目录中的MP4文件进行样本入库
	 * 
	 */
	@Scheduled(cron = "0 */10 * * * ?") //每10分钟
//	@Scheduled(cron = "0 */5 * * * ?") //每5分钟(测试)
	public void timelyGetSampleFiles() {
		//1.遍历上载目录下的文件
		File file = new File(Commons.UPLOADDIR); 
        File[] array = file.listFiles();
        
        if(array.length > 0) {
        	for(int i=0;i<array.length;i++) {   
                //取子目录(子目录是按照频道来区分的)
                if(array[i].isDirectory()) {
                	String childDir = array[i].getName(); //子目录名，即频道名
                	File fileChild = new File(Commons.UPLOADDIR + childDir + "/"); //子目录绝对路径
                	File[] arrayChild = fileChild.listFiles();
                	System.out.println(fileChild + "目录下文件个数：---------" +arrayChild.length);
                	if(arrayChild.length > 0) { //如果子目录
                		for(int j=0;j<arrayChild.length;j++) { //2.迭代解析文件名
                			if(arrayChild[j].isFile()) {
                				String mp4FileName = arrayChild[j].getName();
                				genarateSample(mp4FileName, childDir);
                			}
                		}
                	}
                }
        	}
        }
	}
	
	/**根据文件名和频道id生成TabSample对象并入库
	 * 同时将样本文件重命名并剪切至目标目录
	 */
	public void genarateSample(String fileName, String pid) {
		/*
		 * 目前样本文件命名规则
		 * 宣传片：【宣】 生活频宣20180206_16 (标清)_20180205140519_high.mp4
		 * 广告：     GG087576_费列罗（新年篇）_20171229103302_high.mp4
		 */
		TabSample tabSample = new TabSample();
		String absolutePath= Commons.UPLOADDIR + pid + "/" + fileName; //样本视频文件位于上载目录中的绝对路径
		String newAddr = "";
		String fileNetAddr = "";
		String timeDir = TimeUtil.getTimeDir();
		
		if(StrUtils.isNotEmptyStr(fileName)) {
			String[] fileInfo = fileName.split("_");
			if(fileInfo.length > 0) {
				String sampleId = KeyGen.getADVId();
				tabSample.setSampleId(sampleId);
				tabSample.setPid(pid);
				tabSample.setSecondName("-");
				tabSample.setLength(getTimeLength(absolutePath));
				tabSample.setCompany(Commons.DEFAULTAGENT);
				tabSample.setCreaterName("auto");
				tabSample.setCreateTime(new Timestamp(System.currentTimeMillis()));
				tabSample.setExtFlag(0);
				tabSample.setMatchAgain(0);
				tabSample.setFlag(1);
				newAddr += Commons.VIDEOSAVE + timeDir + "/";  
				tabSample.setFileAddr(newAddr + fileName); //剪切后的样本文件存放位置
				fileNetAddr += Commons.DOMAINADDR + timeDir + "/" + fileName;
				tabSample.setFileNetAddr(fileNetAddr);
				tabSample.setOriginal(1);  //默认都是原版无台标
//				tabSample.setSampleDate(fileInfo[2].substring(0, 8));
				//宣传片和广告的解析逻辑有些区别
				if(fileName.contains("【宣】") || fileName.contains("频宣")){
					//【宣】 生活频宣20180206_16 (标清)_20180205140519_high.mp4
					tabSample.setMainName(fileName.substring(0, fileName.length()-4));
//					if(fileInfo[1].contains("标清")) {
//						tabSample.setClarity(1);
//					}else if(fileInfo[1].contains("高清")) {
//						tabSample.setClarity(2);
//					}
					tabSample.setColumnType("xc");
					tabSample.setAdvId(""); //这里未来可能需要增加根据广告id查重的逻辑代码
				}else if(fileName.contains("GG") || fileName.contains("GH")){
					if(fileName.contains("GG")) {
						tabSample.setClarity(1);
					}else if(fileName.contains("GH")) {
						tabSample.setClarity(2);
					}
					tabSample.setMainName(fileInfo[1]); 
					tabSample.setColumnType("adv");
					tabSample.setAdvId(fileInfo[0]); //这里未来可能需要增加根据广告id查重的逻辑代码
				}
				
				String result = tabSampleService.insertTabSample(tabSample);
				if(result.equals(sampleId)){
					//剪切文件
					try {
						FileUtils.cutFile(Commons.UPLOADDIR + pid + "/" + fileName, newAddr + fileName);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
	//获取mp4文件时长
	public static Integer getTimeLength(String path) {
		Integer length = 0;
		String len = FileUtils.getMp4FileLength(path);
		if(StrUtils.isNotEmptyStr(len)) {
			length = Integer.parseInt(len);
		}
		return length;
	}
	
//	@Scheduled(cron = "0 0 */1 * * ?") //每一小时执行一次定时扫描任务
	@Scheduled(cron = "0 */5 * * * ?") //每5分钟(测试)
	/**
	 * 定时执行获取播返单数据
	 */
	public void timelyGetBfdData(){
		System.out.println("播返单读入定时任务：------" + TimeUtil.getCurrentTime());
		//1.查询tabBfdLoad表中有没有当日的主键
		String loaddate = TimeUtil.getTimeDir();
		TabBfdLoad t = tabBfdLoadService.getBfdLoad(loaddate);
		if(null == t){ //如果没得到当日记录，则插入一条当日记录，并执行一次文件目录扫描
			t = new TabBfdLoad();
			t.setLoaddate(loaddate);
			t.setLoadflag(0);
			tabBfdLoadService.insertBfdLoad(t);
			int result = searchFiles();
			if(result == 1){
				t.setLoadflag(1);
				tabBfdLoadService.updateBfdLoad(t);
			}
		}else{ //如果有当日记录，则判断一下loadflag的值
			if(t.getLoadflag() == 0){ //值为0，证明未读取当日数据，开始执行文件目录扫描
				int result = searchFiles();
				if(result == 1){
					t.setLoadflag(1);
					tabBfdLoadService.updateBfdLoad(t);
				}
			}
		}
		
	}
	/**
	 * 扫描播返单文件
	 * @return
	 */
	public int searchFiles() {
		System.out.println("-----------------------------------");
		String filePath = Commons.BFDDIR + TimeUtil.getMMdd(); //当天播返单存放的目录
		String preDay = TimeUtil.getLastOneDay();
		String pid = "";
		int result = 0;
		/*遍历当天播返单目录下的文件*/
		File root = new File(filePath);
		File[] files = root.listFiles();
		if(files != null) {
			if(files.length > 0) {
				result = 1;
				for(File file:files){ //对各个文件进行频道匹配，读取内容并入库
					String fileAllName = file.getAbsolutePath();
					System.out.println("读取文件：" + fileAllName);
					if(fileAllName.contains("播返单")){
						pid = matchPid(fileAllName);//频道匹配
						
						/*读取Excel*/
						InputStream in =null;
						List<List<Object>> listob = null;
						try {
							in = new FileInputStream(file);
							listob = new ImportExcelUtil().getDataByExcel(in,fileAllName);
							in.close();
						} catch (Exception e) {
							e.printStackTrace();
						}
						if(null != listob){
							if(listob.size()>0){
								//解析listob，填装对象字段值
								for (int i = 0; i < listob.size(); i++) {
									List<Object> lo = listob.get(i);
									TabBroadBack t = setObjValue(lo, pid, preDay);
									t.setCuted(0);
									tabBroadBackService.insertTabBroadBack(t);
									//向详单表同步数据
									tabDetailService.insertTabDetail(t);
								}
							}
						}	
					}
				}
			}
		}
		/*遍历当天播返单目录下的文件*/
		return result;
	}
	
	
	public TabBroadBack setObjValue(List<Object> lo, String pid, String preDay){
		TabBroadBack tb = new TabBroadBack();
		tb.setChannel(pid);
		tb.setJmName(String.valueOf(lo.get(12)));
		
		/* 计算出开始时间及真实时间戳，但是
		 * 由于第二天6点以前的节目播返单也在这里
		 * 而且第二天6点 = 今天30点，所以做一下特殊处理
		 */
		String start = String.valueOf(lo.get(9)); //从单元格读出，例如29:56:00.00
		start = start.substring(0, preDay.length()-2);//去掉秒数后面的小数点
		tb.setStarttime(start); 
		
		//拆分时分秒，并判断是否存在24点之后的时间数据
		String[] array = start.split(":");
		int hour = Integer.parseInt(array[0]);
		String realHour = "" + hour;
		if(hour > 24){ //如果有24点之后的小时数，则与24做差，同时preDay加一天
			hour = hour - 24;
			//日期上加一天
			preDay = TimeUtil.getAfterOneDay(preDay);
		}
		
		if(hour < 10){
			realHour = "0" + hour;
		}
		String minute = array[1];
		String second = array[2];
		String realHms = realHour + ":" + minute + ":" + second;//比如：28:40:20，则转化成04:40:20
		
		String realDay = preDay + " " + realHms; //得出真实时间的字符串
		tb.setStarttime(realDay);
		Long startStamp = TimeUtil.stringToTimestamp(realDay, "yyyy-MM-dd HH:mm:ss"); //得出真实时间的时间戳
		
		/*计算时长*/
		String len = String.valueOf(lo.get(13));
		len = len.substring(0, len.length()-3); //去掉小数点及后面的两位数
		int length = TimeUtil.getSeconds(len);
		tb.setLength(length);
		
		Long endstartStamp = startStamp + length*1000;//计算出结束时间的时间戳
		String realEnd = TimeUtil.timestampToString(new Timestamp(endstartStamp));
		tb.setEndtime(realEnd);
		
		tb.setCreateTime(new Timestamp(System.currentTimeMillis()));
		
		return tb;
	}
	
	//根据播返单文件名的包含信息匹配频道ID
	public String matchPid(String fileAllName){
		String pid = "";
		if(fileAllName.contains("卫视")){
			pid = "BTV1";
		}
		if(fileAllName.contains("文艺")){
			pid = "BTV2";
		}
		if(fileAllName.contains("科教")){
			pid = "BTV3";
		}
		if(fileAllName.contains("null") || fileAllName.contains("影视")){
			pid = "BTV4";
		}
		if(fileAllName.contains("财经")){
			pid = "BTV5";
		}
		if(fileAllName.contains("体育")){
			pid = "BTV6";
		}
		if(fileAllName.contains("生活")){
			pid = "BTV7";
		}
		if(fileAllName.contains("青年")){
			pid = "BTV8";
		}
		if(fileAllName.contains("新闻")){
			pid = "BTV9";
		}
		if(fileAllName.contains("少儿")){
			pid = "BTV10";
		}
		if(fileAllName.contains("纪实")){
			pid = "BTV11";
		}
		return pid;
	}
	
}
